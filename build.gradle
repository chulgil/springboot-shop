plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'

	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.ewerk.gradle.plugins.querydsl'

group = 'me.chulgil'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.code.gson:gson:2.8.6'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'
    compile 'io.springfox:springfox-swagger2:2.7.0'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    
}

test {
	useJUnitPlatform()
}

def queryDslDir = "src/main/generated"

querydsl {
	// Define AnnotationProcessor for using 
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = queryDslDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', queryDslDir]
        }
    }
}


compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
 	// compile된 JPA 의존성에 접근하기위해 사용
    querydsl.extendsFrom compileClasspath
}
